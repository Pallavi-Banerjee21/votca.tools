find_package(EXPAT REQUIRED)
include_directories(${EXPAT_INCLUDE_DIR})
string(REGEX REPLACE "^(.*)/lib([^/]*)\\.[^.]*$" "\\2" EXPAT_LIB_PKG ${EXPAT_LIBRARY})
set(EXPAT_LIB_DIR_PKG ${CMAKE_MATCH_1})

find_package(PkgConfig)
option(NOFFTW "Do not use FFTW3" OFF)
if (NOFFTW)
  set(NOFFTW TRUE)
else(NOFFTW)
  if (NOT FFTW3_INCLUDE_DIR AND NOT FFTW3_LIBRARY)
    if (PKG_CONFIG_FOUND)
      pkg_check_modules(PC_FFTW3 fftw3x)
    else(PKG_CONFIG_FOUND)
	    message(FATAL_ERROR "We ca not look for FFTW3 without pkg-config! Set FFTW3_INCLUDE_DIRS and FFTW3_LIBRARIES if you do not have pkg-config")
    endif(PKG_CONFIG_FOUND)
    if (NOT PC_FFTW3_FOUND)
      message(FATAL_ERROR "FFTW3 not found, help cmake to find it by setting PKG_CONFIG_PATH or setting FFTW3_INCLUDE_DIRS and FFTW3_LIBRARIES or disable it with -DNOFFTW=ON")
    endif(NOT PC_FFTW3_FOUND)
    find_path(FFTW3_INCLUDE_DIR fftw3.h HINTS ${PC_FFTW3_INCLUDE_DIRS})
    find_library(FFTW3_LIBRARY NAMES fftw3 HINTS ${PC_FFTW3_LIBRARY_DIRS} )
  endif (NOT FFTW3_INCLUDE_DIR AND NOT FFTW3_LIBRARY)
  include_directories(${FFTW3_INCLUDE_DIR})
endif(NOFFTW)

option(NOGSL "Do not use GSL" OFF)
if (NOGSL)
  set(NOGSL TRUE)
else(NOGSL)
  find_package(GSL REQUIRED)
  include_directories(${GSL_INCLUDE_DIR})
endif(NOGSL)

add_definitions( -DHAVE_CONFIG_H )
configure_file(config.h.in config.h)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

if (MERCURIAL_FOUND)
  MERCURIAL_HG_INFO(${PROJECT_SOURCE_DIR} TOOLS)
  MESSAGE("Current revision is ${TOOLS_HG_ID}")
else(MERCURIAL_FOUND)
  set (TOOLS_HG_ID)
endif(MERCURIAL_FOUND)
set (HG_HEADER "hgversion.h")
add_custom_command(OUTPUT ${HG_HEADER}
  COMMAND ${CMAKE_COMMAND} -E echo 
  static const std::string hgversion = "\\\"hgid: ${TOOLS_HG_ID}\\\"\;" > ${HG_HEADER})

file(GLOB_RECURSE VOTCA_SOURCES *.cc)
file(GLOB_RECURSE NOT_VOTCA_SOURCES version_nb.cc)
list(REMOVE_ITEM VOTCA_SOURCES ${NOT_VOTCA_SOURCES})
add_library(votca_tools hgversion.h ${VOTCA_SOURCES})
target_link_libraries(votca_tools ${BOOST} 
  ${FFTW3_LIBRARY} ${GSL_LIBRARY} ${EXPAT_LIBRARY})
install(TARGETS votca_tools LIBRARY DESTINATION ${LIB} ARCHIVE DESTINATION ${LIB})

configure_file(libvotca_tools.pc.in libvotca_tools.pc @ONLY)
install(FILES libvotca_tools.pc DESTINATION ${LIB}/pkgconfig)
